// Generated by CoffeeScript 1.10.0
(function() {
  var BufferBuilder, Long, SocketMessageConnect, net,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  Long = require("../util/Long");

  BufferBuilder = require("../util/BufferBuilder");

  net = require('net');

  SocketMessageConnect = (function() {
    SocketMessageConnect.prototype.databuf = new BufferBuilder;

    SocketMessageConnect.prototype.dataneed = 8;

    SocketMessageConnect.prototype.readsize = true;

    SocketMessageConnect.prototype.msg_listener = function() {};

    function SocketMessageConnect(con_para) {
      this.con_para = con_para;
      this.close = bind(this.close, this);
      this.send = bind(this.send, this);
      this.onError = bind(this.onError, this);
      this.onData = bind(this.onData, this);
    }

    SocketMessageConnect.prototype.con = function() {
      if (this.con_cache) {
        return this.con_cache;
      }
      if (this.con_para.connection) {
        this.con_cache = con.connection;
      } else {
        this.con_cache = net.createConnection(this.con_para);
      }
      this.con_cache.on("data", this.onData);
      this.con_cache.on("error", this.onError);
      this.con_cache.on("end", this.close);
      return this.con_cache;
    };

    SocketMessageConnect.prototype.onData = function(buf) {
      var avail, bufpt, ncpy, results;
      if (this.dataneed === 0) {
        throw new Error("SocketMessageConnect: @dataneed can never be 0");
      }
      bufpt = 0;
      avail = buf.length;
      results = [];
      while (bufpt < buf.length) {
        avail = buf.length - bufpt;
        ncpy = Math.min(this.dataneed, avail);
        this.databuf.append(buf.slice(bufpt, bufpt + ncpy));
        bufpt += ncpy;
        this.dataneed -= ncpy;
        if (this.dataneed > 0) {
          continue;
        }
        if (this.readsize) {
          this.readsize = false;
          this.dataneed = Long.fromBufferLE(this.databuf.finalize()).toNumber();
          results.push(this.databuf = new BufferBuilder);
        } else {
          this.msg_listener(this.databuf.finalize());
          this.readsize = true;
          this.dataneed = 8;
          results.push(this.databuf = new BufferBuilder);
        }
      }
      return results;
    };

    SocketMessageConnect.prototype.onError = function() {
      var a;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.log.apply(console, a);
    };

    SocketMessageConnect.prototype.send = function(buf) {
      var szbuf;
      szbuf = Long.fromNumber(buf.length, true).toBufferLE();
      this.con().write(szbuf);
      return this.con().write(buf);
    };

    SocketMessageConnect.prototype.close = function() {
      this.con().end();
      return this.con_cache = null;
    };

    return SocketMessageConnect;

  })();

  module.exports = SocketMessageConnect;

}).call(this);
